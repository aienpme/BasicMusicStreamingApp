// Generated by view binder compiler. Do not edit!
package com.bma.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bma.android.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPlaylistDetailBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final LinearLayout actionButtonsLayout;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final CollapsingToolbarLayout collapsingToolbar;

  @NonNull
  public final MaterialButton playButton;

  @NonNull
  public final ImageView playlistArtwork;

  @NonNull
  public final TextView playlistTitle;

  @NonNull
  public final MaterialButton shuffleButton;

  @NonNull
  public final TextView songCount;

  @NonNull
  public final RecyclerView songsRecyclerView;

  @NonNull
  public final Toolbar toolbar;

  private FragmentPlaylistDetailBinding(@NonNull CoordinatorLayout rootView,
      @NonNull LinearLayout actionButtonsLayout, @NonNull AppBarLayout appBarLayout,
      @NonNull CollapsingToolbarLayout collapsingToolbar, @NonNull MaterialButton playButton,
      @NonNull ImageView playlistArtwork, @NonNull TextView playlistTitle,
      @NonNull MaterialButton shuffleButton, @NonNull TextView songCount,
      @NonNull RecyclerView songsRecyclerView, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.actionButtonsLayout = actionButtonsLayout;
    this.appBarLayout = appBarLayout;
    this.collapsingToolbar = collapsingToolbar;
    this.playButton = playButton;
    this.playlistArtwork = playlistArtwork;
    this.playlistTitle = playlistTitle;
    this.shuffleButton = shuffleButton;
    this.songCount = songCount;
    this.songsRecyclerView = songsRecyclerView;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPlaylistDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPlaylistDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_playlist_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPlaylistDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actionButtonsLayout;
      LinearLayout actionButtonsLayout = ViewBindings.findChildViewById(rootView, id);
      if (actionButtonsLayout == null) {
        break missingId;
      }

      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.collapsingToolbar;
      CollapsingToolbarLayout collapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (collapsingToolbar == null) {
        break missingId;
      }

      id = R.id.playButton;
      MaterialButton playButton = ViewBindings.findChildViewById(rootView, id);
      if (playButton == null) {
        break missingId;
      }

      id = R.id.playlistArtwork;
      ImageView playlistArtwork = ViewBindings.findChildViewById(rootView, id);
      if (playlistArtwork == null) {
        break missingId;
      }

      id = R.id.playlistTitle;
      TextView playlistTitle = ViewBindings.findChildViewById(rootView, id);
      if (playlistTitle == null) {
        break missingId;
      }

      id = R.id.shuffleButton;
      MaterialButton shuffleButton = ViewBindings.findChildViewById(rootView, id);
      if (shuffleButton == null) {
        break missingId;
      }

      id = R.id.songCount;
      TextView songCount = ViewBindings.findChildViewById(rootView, id);
      if (songCount == null) {
        break missingId;
      }

      id = R.id.songsRecyclerView;
      RecyclerView songsRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (songsRecyclerView == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentPlaylistDetailBinding((CoordinatorLayout) rootView, actionButtonsLayout,
          appBarLayout, collapsingToolbar, playButton, playlistArtwork, playlistTitle,
          shuffleButton, songCount, songsRecyclerView, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

// Generated by view binder compiler. Do not edit!
package com.bma.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bma.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentQueueBottomSheetBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final View bottomSheetHandle;

  @NonNull
  public final LinearLayout emptyStateLayout;

  @NonNull
  public final TextView playingFromLabel;

  @NonNull
  public final TextView playingFromTitle;

  @NonNull
  public final LinearLayout queueHeader;

  @NonNull
  public final RecyclerView queueRecyclerView;

  @NonNull
  public final ImageButton repeatButton;

  @NonNull
  public final ImageButton shuffleButton;

  private FragmentQueueBottomSheetBinding(@NonNull LinearLayout rootView,
      @NonNull View bottomSheetHandle, @NonNull LinearLayout emptyStateLayout,
      @NonNull TextView playingFromLabel, @NonNull TextView playingFromTitle,
      @NonNull LinearLayout queueHeader, @NonNull RecyclerView queueRecyclerView,
      @NonNull ImageButton repeatButton, @NonNull ImageButton shuffleButton) {
    this.rootView = rootView;
    this.bottomSheetHandle = bottomSheetHandle;
    this.emptyStateLayout = emptyStateLayout;
    this.playingFromLabel = playingFromLabel;
    this.playingFromTitle = playingFromTitle;
    this.queueHeader = queueHeader;
    this.queueRecyclerView = queueRecyclerView;
    this.repeatButton = repeatButton;
    this.shuffleButton = shuffleButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentQueueBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentQueueBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_queue_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentQueueBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomSheetHandle;
      View bottomSheetHandle = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetHandle == null) {
        break missingId;
      }

      id = R.id.emptyStateLayout;
      LinearLayout emptyStateLayout = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateLayout == null) {
        break missingId;
      }

      id = R.id.playingFromLabel;
      TextView playingFromLabel = ViewBindings.findChildViewById(rootView, id);
      if (playingFromLabel == null) {
        break missingId;
      }

      id = R.id.playingFromTitle;
      TextView playingFromTitle = ViewBindings.findChildViewById(rootView, id);
      if (playingFromTitle == null) {
        break missingId;
      }

      id = R.id.queueHeader;
      LinearLayout queueHeader = ViewBindings.findChildViewById(rootView, id);
      if (queueHeader == null) {
        break missingId;
      }

      id = R.id.queueRecyclerView;
      RecyclerView queueRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (queueRecyclerView == null) {
        break missingId;
      }

      id = R.id.repeatButton;
      ImageButton repeatButton = ViewBindings.findChildViewById(rootView, id);
      if (repeatButton == null) {
        break missingId;
      }

      id = R.id.shuffleButton;
      ImageButton shuffleButton = ViewBindings.findChildViewById(rootView, id);
      if (shuffleButton == null) {
        break missingId;
      }

      return new FragmentQueueBottomSheetBinding((LinearLayout) rootView, bottomSheetHandle,
          emptyStateLayout, playingFromLabel, playingFromTitle, queueHeader, queueRecyclerView,
          repeatButton, shuffleButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

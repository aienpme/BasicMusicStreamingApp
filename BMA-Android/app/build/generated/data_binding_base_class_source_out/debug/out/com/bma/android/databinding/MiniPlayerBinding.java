// Generated by view binder compiler. Do not edit!
package com.bma.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bma.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MiniPlayerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout contentContainer;

  @NonNull
  public final LinearLayout controlsContainer;

  @NonNull
  public final TextView miniPlayerArtist;

  @NonNull
  public final ImageView miniPlayerArtwork;

  @NonNull
  public final ImageButton miniPlayerNext;

  @NonNull
  public final ImageButton miniPlayerPlayPause;

  @NonNull
  public final ImageButton miniPlayerPrevious;

  @NonNull
  public final ProgressBar miniPlayerProgress;

  @NonNull
  public final TextView miniPlayerTitle;

  @NonNull
  public final LinearLayout textContainer;

  private MiniPlayerBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout contentContainer, @NonNull LinearLayout controlsContainer,
      @NonNull TextView miniPlayerArtist, @NonNull ImageView miniPlayerArtwork,
      @NonNull ImageButton miniPlayerNext, @NonNull ImageButton miniPlayerPlayPause,
      @NonNull ImageButton miniPlayerPrevious, @NonNull ProgressBar miniPlayerProgress,
      @NonNull TextView miniPlayerTitle, @NonNull LinearLayout textContainer) {
    this.rootView = rootView;
    this.contentContainer = contentContainer;
    this.controlsContainer = controlsContainer;
    this.miniPlayerArtist = miniPlayerArtist;
    this.miniPlayerArtwork = miniPlayerArtwork;
    this.miniPlayerNext = miniPlayerNext;
    this.miniPlayerPlayPause = miniPlayerPlayPause;
    this.miniPlayerPrevious = miniPlayerPrevious;
    this.miniPlayerProgress = miniPlayerProgress;
    this.miniPlayerTitle = miniPlayerTitle;
    this.textContainer = textContainer;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MiniPlayerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MiniPlayerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.mini_player, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MiniPlayerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.contentContainer;
      ConstraintLayout contentContainer = ViewBindings.findChildViewById(rootView, id);
      if (contentContainer == null) {
        break missingId;
      }

      id = R.id.controlsContainer;
      LinearLayout controlsContainer = ViewBindings.findChildViewById(rootView, id);
      if (controlsContainer == null) {
        break missingId;
      }

      id = R.id.miniPlayerArtist;
      TextView miniPlayerArtist = ViewBindings.findChildViewById(rootView, id);
      if (miniPlayerArtist == null) {
        break missingId;
      }

      id = R.id.miniPlayerArtwork;
      ImageView miniPlayerArtwork = ViewBindings.findChildViewById(rootView, id);
      if (miniPlayerArtwork == null) {
        break missingId;
      }

      id = R.id.miniPlayerNext;
      ImageButton miniPlayerNext = ViewBindings.findChildViewById(rootView, id);
      if (miniPlayerNext == null) {
        break missingId;
      }

      id = R.id.miniPlayerPlayPause;
      ImageButton miniPlayerPlayPause = ViewBindings.findChildViewById(rootView, id);
      if (miniPlayerPlayPause == null) {
        break missingId;
      }

      id = R.id.miniPlayerPrevious;
      ImageButton miniPlayerPrevious = ViewBindings.findChildViewById(rootView, id);
      if (miniPlayerPrevious == null) {
        break missingId;
      }

      id = R.id.miniPlayerProgress;
      ProgressBar miniPlayerProgress = ViewBindings.findChildViewById(rootView, id);
      if (miniPlayerProgress == null) {
        break missingId;
      }

      id = R.id.miniPlayerTitle;
      TextView miniPlayerTitle = ViewBindings.findChildViewById(rootView, id);
      if (miniPlayerTitle == null) {
        break missingId;
      }

      id = R.id.textContainer;
      LinearLayout textContainer = ViewBindings.findChildViewById(rootView, id);
      if (textContainer == null) {
        break missingId;
      }

      return new MiniPlayerBinding((ConstraintLayout) rootView, contentContainer, controlsContainer,
          miniPlayerArtist, miniPlayerArtwork, miniPlayerNext, miniPlayerPlayPause,
          miniPlayerPrevious, miniPlayerProgress, miniPlayerTitle, textContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
